clear all, close all

%% Basic parameters
parameters;
options = odeset('RelTol',1e-8,'AbsTol',1e-8, 'MassSingular','yes');

%% HJB fb

%y0 = ones(2,1);

% Return the function V(z) and plot it, THIS IS INCORRECT! This is an
% initial value problem, I need to do 2 boundary problem!
[p_B, p_G] = obtain_boundary_values(r, A_G, A_B ,delta,theta);
[z,Vz] = ode45(@ode_v_fb ,[0 1], [p_B 1], options, r,sigma_G, sigma_B ,A_G, A_B ,delta,theta);

plot(z,Vz(:,1));




%% Boundary value problem solver:
parameters;

%S = [0 0; 0 2/(sigma_G^2+sigma_B^2)];
%options = bvpset('SingularTerm',S);

[p_B,p_G,i_B,i_G] = obtain_boundary_values(r, A_G, A_B ,delta,theta);

ode = @(z,y) ode_v_fb(z,y,r,sigma_G, sigma_B ,A_G, A_B ,delta,theta);
bc = @(ya, yb) bc_fb(ya, yb, p_B, p_G);


% obtain init
xmesh = linspace(0,1,100);
y0_guess = [p_B;0]; % start is known, V' is unknown. Guess whole line
guessFun = @(z) guess(z,y0_guess,r,sigma_G, sigma_B ,A_G, A_B ,delta,theta);
solinit = bvpinit(xmesh, guessFun);


fb = bvp4c(ode,bc,solinit);
found_y = fb.y(:,1);

options = odeset(RelTol=1e-12,AbsTol=1e-12,Events=@isOptim);
sol = ode45(ode, [0 1], found_y, options);


plot(sol.x, fb.y(1,:))








